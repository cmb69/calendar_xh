/**
 * Copyright 2017-2021 Christoph M. Becker
 *
 * This file is part of Calendar_XH.
 *
 * Calendar_XH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Calendar_XH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Calendar_XH.  If not, see <http://www.gnu.org/licenses/>.
 */

// @ts-check

/**
 * @param {Element} calendar
 * @param {string} url
 * @param {boolean} isPop
 */
function retrieveCalendar(calendar, url, isPop) {
    var request = new XMLHttpRequest();
    calendar.classList.add("calendar_loading");
    request.open("GET", url, true);
    request.setRequestHeader("X-Requested-With",  "XMLHttpRequest");
    request.onload = function () {
        if (this.status >= 200 && this.status < 300) {
            replaceCalendar(calendar, this, isPop);
        }
        calendar.classList.remove("calendar_loading");
    };
    request.send();
}

/**
 * @param {Element} calendar
 * @param {XMLHttpRequest} request
 * @param {boolean} isPop
 */
function replaceCalendar(calendar, request, isPop) {
    calendar.innerHTML = request.response;
    initCalendar(calendar);
    if (!isPop) {
        var url = request.responseURL || request.getResponseHeader("X-Location");
        history.pushState({calendar_url: url}, document.title, url);
    }
}

/**
 * @param {Element} calendar
 */
function initCalendar(calendar) {
    let anchors = /** @type {NodeListOf<HTMLAnchorElement>} */
        (calendar.querySelectorAll(".calendar_monthyear a"));
    anchors.forEach(function (anchor) {
        anchor.onclick = function (event) {
            retrieveCalendar(calendar, anchor.href, false);
            event.preventDefault();
        };
    });
}

history.replaceState({calendar_url: location.href}, document.title, location.href);
window.addEventListener("popstate", function (event) {
    if ("calendar_url" in event.state) {
        var container = document.getElementsByClassName("calendar_calendar")[0];
        retrieveCalendar(container, event.state.calendar_url, true);
    }
});
document.querySelectorAll(".calendar_calendar").forEach(function (calendar) {
    initCalendar(calendar);
});

class OverviewWidget {
    /**
     * @param {Element} element
     */
    constructor (element) {
        const editButton = element.querySelector("button[value='update']");
        var deleteButton = element.querySelector("button[value='delete']");
        const radios = /** @type {NodeListOf<HTMLElement>}} */ (element.querySelectorAll("tr input[type='radio']"));
        radios.forEach(function (radio) {
            var col = radio.parentNode;
            col.appendChild(editButton.cloneNode(true));
            col.appendChild(deleteButton.cloneNode(true));
            radio.style.display = "none";
        });
        editButton.parentNode.removeChild(editButton);
        deleteButton.parentNode.removeChild(deleteButton);
        element.querySelectorAll("tr").forEach(tr =>
            tr.onclick = () => this.selectRow(tr)
        );
    }

    /**
     * @param {HTMLTableRowElement} tr
     */
    selectRow(tr) {
        let select = /** @type {HTMLInputElement} */
            (tr.querySelector("input[type='radio']"));
        select.checked = true;
    }
}

document.querySelectorAll(".calendar_overview").forEach(form => new OverviewWidget(form));
