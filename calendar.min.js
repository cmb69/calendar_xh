/**
 * Copyright 2017-2021 Christoph M. Becker
 *
 * This file is part of Calendar_XH.
 *
 * Calendar_XH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Calendar_XH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Calendar_XH.  If not, see <http://www.gnu.org/licenses/>.
 */

// @ts-check

class CalendarWidget {
    /**
     * @param {Element} element
     */
    constructor (element) {
        this.element = element;
        let anchors = /** @type {NodeListOf<HTMLAnchorElement>} */
            (element.querySelectorAll(".calendar_monthyear a"));
        anchors.forEach(anchor => {
            anchor.onclick = event => {
                this.retrieveCalendar(anchor.href, false);
                event.preventDefault();
            };
        });
        history.replaceState({calendar_url: location.href}, document.title, location.href);
        window.addEventListener("popstate", event => this.onPopState(event));
    }

    /**
     * @param {string} url
     * @param {boolean} isPop
     */
    retrieveCalendar(url, isPop) {
        var request = new XMLHttpRequest();
        this.element.classList.add("calendar_loading");
        request.open("GET", url, true);
        request.setRequestHeader("X-Requested-With",  "XMLHttpRequest");
        request.onload = () => {
            if (request.status >= 200 && request.status < 300) {
                this.replaceCalendar(request, isPop);
            }
            this.element.classList.remove("calendar_loading");
        };
        request.send();
    }

    /**
     * @param {XMLHttpRequest} request
     * @param {boolean} isPop
     */
    replaceCalendar(request, isPop) {
        this.element.innerHTML = request.response;
        new CalendarWidget(this.element);
        if (!isPop) {
            var url = request.responseURL || request.getResponseHeader("X-Location");
            history.pushState({calendar_url: url}, document.title, url);
        }
    }

    /**
     * @param {PopStateEvent} event
     */
    onPopState(event) {
        if ("calendar_url" in event.state) {
            this.retrieveCalendar(event.state.calendar_url, true);
        }
    }
}

document.querySelectorAll(".calendar_calendar").forEach(element => new CalendarWidget(element));

class OverviewWidget {
    /**
     * @param {Element} element
     */
    constructor (element) {
        this.editButton = element.querySelector("button[value='update']");
        this.deleteButton = element.querySelector("button[value='delete']");
        let radios = /** @type {NodeListOf<HTMLInputElement>}} */
            (element.querySelectorAll("tr input[type='radio']"));
        radios.forEach(radio => this.replaceRadiosWithButtons(radio));
        this.editButton.parentNode.removeChild(this.editButton);
        this.deleteButton.parentNode.removeChild(this.deleteButton);
        element.querySelectorAll("tr").forEach(tr =>
            tr.onclick = () => this.selectRow(tr)
        );
    }

    /**
     * @param {HTMLInputElement} radio
     */
    replaceRadiosWithButtons(radio) {
        var col = radio.parentNode;
        col.appendChild(this.editButton.cloneNode(true));
        col.appendChild(this.deleteButton.cloneNode(true));
        radio.style.display = "none";
    }

    /**
     * @param {HTMLTableRowElement} tr
     */
    selectRow(tr) {
        let select = /** @type {HTMLInputElement} */
            (tr.querySelector("input[type='radio']"));
        select.checked = true;
    }
}

document.querySelectorAll(".calendar_overview").forEach(form => new OverviewWidget(form));
